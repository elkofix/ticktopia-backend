name: Deploy Express to AWS ECS (Public ECR)

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  ECR_PUBLIC_REGISTRY: public.ecr.aws/r7c1c8z5
  ECR_REPOSITORY_EXPRESS: express-app
  ECS_CLUSTER: my-first-cluster
  ECS_SECURITY_GROUP: sg-02c3702cfa8399f6e
  ECS_SUBNET: subnet-0be06e3f7707dadb7

jobs:
  deploy:
    name: Build & Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login en Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Construir y subir imagen de Express a ECR Public
        run: |
          IMAGE_TAG=latest
          IMAGE_URL=$ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY_EXPRESS:$IMAGE_TAG
          
          docker build -t $IMAGE_URL .
          docker push $IMAGE_URL
          
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_ENV

      - name: Obtener la última versión de la tarea
        run: |
          LATEST_TASK_DEFINITION=$(aws ecs list-task-definitions \
            --family-prefix express-mongo-task \
            --sort DESC \
            --query 'taskDefinitionArns[0]' \
            --output text)
          echo "LATEST_TASK_DEFINITION=$LATEST_TASK_DEFINITION" >> $GITHUB_ENV

      - name: Obtener la ENI de la tarea en ejecución (si existe)
        run: |
          RUNNING_TASKS=$(aws ecs list-tasks --cluster $ECS_CLUSTER --desired-status RUNNING --query 'taskArns' --output text)

          if [ -n "$RUNNING_TASKS" ]; then
            NETWORK_INTERFACE_ID=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $RUNNING_TASKS \
              --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
            
            echo "ENI_ACTUAL=$NETWORK_INTERFACE_ID" >> $GITHUB_ENV
            echo "Tareas en ejecución: $RUNNING_TASKS"
          else
            echo "No hay tareas en ejecución."
            echo "ENI_ACTUAL=" >> $GITHUB_ENV
          fi
          
          echo "RUNNING_TASKS=$RUNNING_TASKS" >> $GITHUB_ENV

      - name: Detener tareas en ejecución
        run: |
          if [ -n "$RUNNING_TASKS" ]; then
            for TASK in $RUNNING_TASKS; do
              aws ecs stop-task --cluster $ECS_CLUSTER --task $TASK
            done
            echo "Esperando a que las tareas se detengan..."
            sleep 10
          fi

      - name: Esperar hasta que las tareas se detengan completamente
        run: |
          for i in {1..10}; do
            TASKS_REMAINING=$(aws ecs list-tasks --cluster $ECS_CLUSTER --desired-status RUNNING --query 'taskArns' --output text)
            
            if [ -z "$TASKS_REMAINING" ]; then
              echo "Las tareas se han detenido completamente."
              break
            fi
            
            echo "Esperando 10 segundos para verificar nuevamente..."
            sleep 10
          done

      - name: Ejecutar una nueva tarea en ECS con la misma ENI (si aplica)
        run: |
          if [ -n "$ENI_ACTUAL" ]; then
            echo "Intentando reutilizar la ENI existente: $ENI_ACTUAL"
            NETWORK_CONFIGURATION="awsvpcConfiguration={subnets=[$ECS_SUBNET],securityGroups=[$ECS_SECURITY_GROUP],assignPublicIp=ENABLED}"
          else
            echo "Asignando nueva ENI..."
            NETWORK_CONFIGURATION="awsvpcConfiguration={subnets=[$ECS_SUBNET],securityGroups=[$ECS_SECURITY_GROUP],assignPublicIp=ENABLED}"
          fi

          TASK_ARN=$(aws ecs run-task --cluster $ECS_CLUSTER \
            --task-definition $LATEST_TASK_DEFINITION \
            --launch-type FARGATE \
            --network-configuration "$NETWORK_CONFIGURATION" \
            --query 'tasks[0].taskArn' --output text)

          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV

      - name: Obtener y mostrar la IP pública de la tarea
        run: |
          echo "Esperando a que la nueva tarea tenga una ENI asignada..."
          sleep 5
          
          for i in {1..10}; do
            NETWORK_INTERFACE_ID=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN \
              --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
            
            if [ -n "$NETWORK_INTERFACE_ID" ]; then
              echo "ENI asignada: $NETWORK_INTERFACE_ID"
              break
            fi
            
            echo "Esperando 5 segundos más..."
            sleep 5
          done

          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $NETWORK_INTERFACE_ID \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)

          echo "La IP pública de la tarea es: $PUBLIC_IP"