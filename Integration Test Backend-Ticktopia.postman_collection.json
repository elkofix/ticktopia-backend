{
	"info": {
		"_postman_id": "1dc54d65-4693-4819-83ee-db0c3244ac87",
		"name": "Integration Test Backend-Ticktopia",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38823104"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "LOGIN EXITING USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has user and token properties\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('user');\r",
											"    pm.expect(responseBody).to.have.property('token');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{superadminEmail}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN USER NOT FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has the expected message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.equal(\"User with email any@mail.com not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has the expected error\", function () {\r",
											"    pm.expect(pm.response.json().error).to.equal(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has the expected statusCode\", function () {\r",
											"    pm.expect(pm.response.json().statusCode).to.equal(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"any@mail.com\",\r\n    \"password\": \"anypassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN USER NO FIELDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test for presence of error field\r",
											"pm.test(\"Error field exists in the response\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('error');\r",
											"});\r",
											"\r",
											"// Test for specific error messages\r",
											"pm.test(\"Error message for email validation\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('message');\r",
											"    pm.expect(responseBody.message).to.be.an('array').that.includes('email must be an email');\r",
											"    pm.expect(responseBody.message).to.be.an('array').that.includes('email must be a string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "REGISTER USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has user and token properties\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('user');\r",
											"    pm.expect(responseBody).to.have.property('token');\r",
											"});\r",
											"\r",
											"// Test for response body user properties\r",
											"pm.test(\"User object has expected properties\", function () {\r",
											"    const user = pm.response.json().user;\r",
											"    pm.expect(user).to.have.property('id');\r",
											"    pm.expect(user).to.have.property('email');\r",
											"    pm.expect(user).to.have.property('name');\r",
											"    pm.expect(user).to.have.property('lastname');\r",
											"    pm.expect(user).to.have.property('isActive');\r",
											"    pm.expect(user).to.have.property('roles');\r",
											"    pm.expect(user.roles).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "REGISTER EVENT MANAGE USER AS ADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has user and token properties\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('user');\r",
											"    pm.expect(responseBody).to.have.property('token');\r",
											"});\r",
											"\r",
											"// Test for response body user properties\r",
											"pm.test(\"User object has expected properties\", function () {\r",
											"    const user = pm.response.json().user;\r",
											"    pm.expect(user).to.have.property('id');\r",
											"    pm.expect(user).to.have.property('email');\r",
											"    pm.expect(user).to.have.property('name');\r",
											"    pm.expect(user).to.have.property('lastname');\r",
											"    pm.expect(user).to.have.property('isActive');\r",
											"    pm.expect(user).to.have.property('roles');\r",
											"    pm.expect(user.roles).to.be.an('array');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"const url = pm.collectionVariables.get(\"base_url\")\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"// Guardar el email aleatorio en la variable de colección\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Login como admin y guardar el token\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/login`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email, // <-- Reemplaza con un email de admin válido\r",
											"            password: password   // <-- Reemplaza con su contraseña\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en login admin:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const token = res.json().token;\r",
											"\r",
											"    if (!token) {\r",
											"        console.log(\"No se obtuvo token del admin.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"    console.log(\"Token del admin guardado:\", token);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${url}/api/auth/register`,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                name: \"Isabella\",\r",
											"                lastname: \"Ocampo\",\r",
											"                password: password,\r",
											"                email: randomEmail\r",
											"            })\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"Error al crear usuario:\", err);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        const user = res.json().user;\r",
											"        console.log(user)\r",
											"        if (user && user.id) {\r",
											"            pm.collectionVariables.set(\"userId\", user.id);\r",
											"            console.log(\"Usuario creado. ID guardado:\", user.id);\r",
											"        } else {\r",
											"            console.log(\"No se encontró el ID del usuario en la respuesta.\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register/event-manager",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										"event-manager"
									]
								}
							},
							"response": []
						},
						{
							"name": "REGISTER EVENT MANAGE USER AS NOT ADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the status code\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"// Test for the error type\r",
											"pm.test(\"Error type is Forbidden\", function () {\r",
											"    pm.expect(pm.response.json().error).to.equal(\"Forbidden\");\r",
											"});\r",
											"\r",
											"// Test for the statusCode field\r",
											"pm.test(\"StatusCode field is 403\", function () {\r",
											"    pm.expect(pm.response.json().statusCode).to.equal(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Registrar un nuevo usuario\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: randomEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const user = res.json().user;\r",
											"    const token = res.json().token;\r",
											"    if (!user || !user.id || !token) {\r",
											"        console.log(\"No se obtuvo el ID o el token del usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"userId\", user.id);\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"\r",
											"    console.log(\"Usuario registrado. ID:\", user.id);\r",
											"    console.log(\"Usuario registrado. Token:\", token);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register/event-manager",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										"event-manager"
									]
								}
							},
							"response": []
						},
						{
							"name": "REGISTER EVENT MANAGE USER AS UNAUTHENTICATED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test for response message\r",
											"pm.test(\"Response message is Unauthorized\", function () {\r",
											"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"// Test for response statusCode\r",
											"pm.test(\"Response statusCode is 401\", function () {\r",
											"    pm.expect(pm.response.json().statusCode).to.equal(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register/event-manager",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register",
										"event-manager"
									]
								}
							},
							"response": []
						},
						{
							"name": "REGISTER USER ALREADY REGISTERED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"// Test for response message\r",
											"pm.test(\"Response message is present\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.exist;\r",
											"    pm.expect(response.message).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Test for error field\r",
											"pm.test(\"Error field is present\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.error).to.exist;\r",
											"    pm.expect(response.error).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Test for statusCode field\r",
											"pm.test(\"StatusCode field is present\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.statusCode).to.exist;\r",
											"    pm.expect(response.statusCode).to.be.a('number');\r",
											"});\r",
											"\r",
											"// Test for the content type\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{superadminEmail}}\",\r\n    \"password\": \"Hola1597!!!!\",\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "REGISTER USER NO FIELDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify the response status code is 400\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test 2: Verify the response message is an array\r",
											"pm.test(\"Response message is an array\", function () {\r",
											"    pm.expect(pm.response.json().message).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Test 3: Verify the response body contains the expected error message\r",
											"pm.test(\"Response body contains the expected error message\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.error).to.equal(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Test 4: Verify the response body contains the expected status code\r",
											"pm.test(\"Response body contains the expected status code\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.statusCode).to.equal(400);\r",
											"});\r",
											"\r",
											"// Test 5: Verify the response includes specific error messages\r",
											"pm.test(\"Response includes specific error messages\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.message).to.deep.include.members([\"email must be an email\", \"email must be a string\"]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "FIND USERS ALL USERS AS ADMIN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        \r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        } else {\r",
											"            console.log(\"No se encontró un token en la respuesta.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for array elements\r",
											"const response = pm.response.json();\r",
											"for (let i = 0; i < response.length; i++) {\r",
											"    pm.test(`User ${i + 1} has an ID`, function () {\r",
											"        pm.expect(response[i].id).to.exist;\r",
											"    });\r",
											"    pm.test(`User ${i + 1} has a valid email`, function () {\r",
											"        pm.expect(response[i].email).to.be.a('string');\r",
											"    });\r",
											"    pm.test(`User ${i + 1} has roles`, function () {\r",
											"        pm.expect(response[i].roles).to.be.an('array');\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "FIND USERS ALL USERS AS NOT ADMIN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"userEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        \r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        } else {\r",
											"            console.log(\"No se encontró un token en la respuesta.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has expected properties\", function () {\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"    pm.response.to.have.jsonBody(\"error\");\r",
											"    pm.response.to.have.jsonBody(\"statusCode\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "FIND USERS ALL USERS AS UNAUTHENTICATED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body has message field\", function () {\r",
											"    pm.expect(pm.response.json().message).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has statusCode field\", function () {\r",
											"    pm.expect(pm.response.json().statusCode).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "FIND ONE USER AS ADMIN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"const url = pm.collectionVariables.get(\"base_url\")\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"// Guardar el email aleatorio en la variable de colección\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Login como admin y guardar el token\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/login`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email, // <-- Reemplaza con un email de admin válido\r",
											"            password: password   // <-- Reemplaza con su contraseña\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en login admin:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const token = res.json().token;\r",
											"\r",
											"    if (!token) {\r",
											"        console.log(\"No se obtuvo token del admin.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"    console.log(\"Token del admin guardado:\", token);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${url}/api/auth/register`,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                name: \"Isabella\",\r",
											"                lastname: \"Ocampo\",\r",
											"                password: password,\r",
											"                email: randomEmail\r",
											"            })\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"Error al crear usuario:\", err);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        const user = res.json().user;\r",
											"        console.log(user)\r",
											"        if (user && user.id) {\r",
											"            pm.collectionVariables.set(\"userId\", user.id);\r",
											"            console.log(\"Usuario creado. ID guardado:\", user.id);\r",
											"        } else {\r",
											"            console.log(\"No se encontró el ID del usuario en la respuesta.\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        \r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        } else {\r",
											"            console.log(\"No se encontró un token en la respuesta.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FIND ONE USER AS ADMIN NOT FOUND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"const url = pm.collectionVariables.get(\"base_url\")\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"// Guardar el email aleatorio en la variable de colección\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Login como admin y guardar el token\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/login`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email, // <-- Reemplaza con un email de admin válido\r",
											"            password: password   // <-- Reemplaza con su contraseña\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en login admin:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const token = res.json().token;\r",
											"\r",
											"    if (!token) {\r",
											"        console.log(\"No se obtuvo token del admin.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"    console.log(\"Token del admin guardado:\", token);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${url}/api/auth/register`,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\",\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                name: \"Isabella\",\r",
											"                lastname: \"Ocampo\",\r",
											"                password: password,\r",
											"                email: randomEmail\r",
											"            })\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"Error al crear usuario:\", err);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        const user = res.json().user;\r",
											"        console.log(user)\r",
											"        if (user && user.id) {\r",
											"            pm.collectionVariables.set(\"userId\", user.id);\r",
											"            console.log(\"Usuario creado. ID guardado:\", user.id);\r",
											"        } else {\r",
											"            console.log(\"No se encontró el ID del usuario en la respuesta.\");\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the response status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"// Test for the presence of the 'message' field in the response body\r",
											"pm.test(\"Response body has 'message' field\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.message).to.exist;\r",
											"});\r",
											"// Test for the presence of the 'error' field in the response body\r",
											"pm.test(\"Response body has 'error' field\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.error).to.exist;\r",
											"});\r",
											"// Test for the presence of the 'statusCode' field in the response body\r",
											"pm.test(\"Response body has 'statusCode' field\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.statusCode).to.exist;\r",
											"});// Test for the presence of specific fields in the response body\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{$randomUUID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{$randomUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FIND ONE USER AS NOT ADMIN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Registrar un nuevo usuario\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: randomEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const user = res.json().user;\r",
											"    const token = res.json().token;\r",
											"    if (!user || !user.id || !token) {\r",
											"        console.log(\"No se obtuvo el ID o el token del usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"userId\", user.id);\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"\r",
											"    console.log(\"Usuario registrado. ID:\", user.id);\r",
											"    console.log(\"Usuario registrado. Token:\", token);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify the status code is 200 OK\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 3: Verify the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FIND ONE USER AS NOT ADMIN NOT MYSELF",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"// Generar primer correo y registrar usuario para obtener el token\r",
											"const firstEmail = generateRandomEmail();\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: firstEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar primer usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const token = res.json().token;\r",
											"    if (!token) {\r",
											"        console.log(\"No se obtuvo el token del primer usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"    console.log(\"Token del primer usuario registrado:\", token);\r",
											"\r",
											"    // Registrar segundo usuario para obtener el ID\r",
											"    const secondEmail = generateRandomEmail();\r",
											"    pm.collectionVariables.set(\"randomEmail\", secondEmail); // Si lo necesitas luego\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${url}/api/auth/register`,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                name: \"Camila\",\r",
											"                lastname: \"Ramírez\",\r",
											"                email: secondEmail,\r",
											"                password: password\r",
											"            })\r",
											"        }\r",
											"    }, function (err2, res2) {\r",
											"        if (err2) {\r",
											"            console.log(\"Error al registrar segundo usuario:\", err2);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        const user = res2.json().user;\r",
											"        if (!user || !user.id) {\r",
											"            console.log(\"No se obtuvo el ID del segundo usuario.\");\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        console.log(\"ID del segundo usuario registrado:\", user.id);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has message, error, and statusCode\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('message');\r",
											"    pm.expect(responseBody).to.have.property('error');\r",
											"    pm.expect(responseBody).to.have.property('statusCode');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FIND ONE USER AS UNAUNTHETHICATED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has the expected message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has the expected status code\", function () {\r",
											"    pm.expect(pm.response.json().statusCode).to.equal(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "UPDATE MYSELF",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Registrar un nuevo usuario\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: randomEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const user = res.json().user;\r",
											"    const token = res.json().token;\r",
											"    if (!user || !user.id || !token) {\r",
											"        console.log(\"No se obtuvo el ID o el token del usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"userId\", user.id);\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"\r",
											"    console.log(\"Usuario registrado. ID:\", user.id);\r",
											"    console.log(\"Usuario registrado. Token:\", token);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to validate the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test to validate the response body properties\r",
											"pm.test(\"Response body has the required properties\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.id).to.exist;\r",
											"    pm.expect(responseBody.email).to.exist;\r",
											"    pm.expect(responseBody.name).to.exist;\r",
											"    pm.expect(responseBody.lastname).to.exist;\r",
											"    pm.expect(responseBody.isActive).to.exist;\r",
											"    pm.expect(responseBody.roles).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Valentina\",\r\n    \"lastname\": \"Ocampos\",\r\n    \"email\": \"{{randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE NOT MYSELF",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"// Generar primer correo y registrar usuario para obtener el token\r",
											"const firstEmail = generateRandomEmail();\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: firstEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar primer usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const token = res.json().token;\r",
											"    if (!token) {\r",
											"        console.log(\"No se obtuvo el token del primer usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"    console.log(\"Token del primer usuario registrado:\", token);\r",
											"\r",
											"    // Registrar segundo usuario para obtener el ID\r",
											"    const secondEmail = generateRandomEmail();\r",
											"    pm.collectionVariables.set(\"randomEmail\", secondEmail); // Si lo necesitas luego\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${url}/api/auth/register`,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                name: \"Camila\",\r",
											"                lastname: \"Ramírez\",\r",
											"                email: secondEmail,\r",
											"                password: password\r",
											"            })\r",
											"        }\r",
											"    }, function (err2, res2) {\r",
											"        if (err2) {\r",
											"            console.log(\"Error al registrar segundo usuario:\", err2);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        const user = res2.json().user;\r",
											"        if (!user || !user.id) {\r",
											"            console.log(\"No se obtuvo el ID del segundo usuario.\");\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        console.log(\"ID del segundo usuario registrado:\", user.id);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has expected properties\", function () {\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"    pm.response.to.have.jsonBody(\"error\");\r",
											"    pm.response.to.have.jsonBody(\"statusCode\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Valentina\",\r\n    \"lastname\": \"Ocampos\",\r\n    \"email\": \"{{randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE MYSELF UNWANTED PROPERTIES",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Registrar un nuevo usuario\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: randomEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const user = res.json().user;\r",
											"    const token = res.json().token;\r",
											"    if (!user || !user.id || !token) {\r",
											"        console.log(\"No se obtuvo el ID o el token del usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"userId\", user.id);\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"\r",
											"    console.log(\"Usuario registrado. ID:\", user.id);\r",
											"    console.log(\"Usuario registrado. Token:\", token);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body contains expected properties\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('message');\r",
											"    pm.expect(responseBody).to.have.property('error');\r",
											"    pm.expect(responseBody).to.have.property('statusCode');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Valentina\",\r\n    \"lastname\": \"Ocampo\",\r\n    \"password\": \"password\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"role\": \"event-manager\",\r\n    \"isActive\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE UNAUTHENTICATED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Registrar un nuevo usuario\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: randomEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const user = res.json().user;\r",
											"    const token = res.json().token;\r",
											"    if (!user || !user.id || !token) {\r",
											"        console.log(\"No se obtuvo el ID o el token del usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"userId\", user.id);\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"\r",
											"    console.log(\"Usuario registrado. ID:\", user.id);\r",
											"    console.log(\"Usuario registrado. Token:\", token);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response contains expected properties\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"message\");\r",
											"    pm.expect(responseBody).to.have.property(\"statusCode\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Valentina\",\r\n    \"lastname\": \"Ocampos\",\r\n    \"email\": \"{{randomEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DELETE MYSELF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify message in the response\", function () {\r",
											"    pm.expect(pm.response.json().message).to.include(\"User\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Registrar un nuevo usuario\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: randomEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const user = res.json().user;\r",
											"    const token = res.json().token;\r",
											"    if (!user || !user.id || !token) {\r",
											"        console.log(\"No se obtuvo el ID o el token del usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"userId\", user.id);\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"\r",
											"    console.log(\"Usuario registrado. ID:\", user.id);\r",
											"    console.log(\"Usuario registrado. Token:\", token);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE MYSELF ALREADY DELETED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has expected properties\", function () {\r",
											"    pm.response.to.have.jsonBody('message');\r",
											"    pm.response.to.have.jsonBody('error');\r",
											"    pm.response.to.have.jsonBody('statusCode');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"const randomEmail = generateRandomEmail();\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Registrar un nuevo usuario\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: randomEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const user = res.json().user;\r",
											"    const token = res.json().token;\r",
											"    if (!user || !user.id || !token) {\r",
											"        console.log(\"No se obtuvo el ID o el token del usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"userId\", user.id);\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"\r",
											"    console.log(\"Usuario registrado. ID:\", user.id);\r",
											"    console.log(\"Usuario registrado. Token:\", token);\r",
											"\r",
											"    // Eliminar el usuario recién creado\r",
											"    pm.sendRequest({\r",
											"        url: `${url}/api/auth/users/${user.id}`,\r",
											"        method: \"DELETE\",\r",
											"        header: {\r",
											"            \"Authorization\": `Bearer ${token}`,\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    }, function (deleteErr, deleteRes) {\r",
											"        if (deleteErr) {\r",
											"            console.log(\"Error al eliminar el usuario:\", deleteErr);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        console.log(\"Usuario eliminado. Status:\", deleteRes.status);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE MYSELF NOT MYSELF Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has expected properties\", function () {\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"    pm.response.to.have.jsonBody(\"error\");\r",
											"    pm.response.to.have.jsonBody(\"statusCode\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"// Generar primer correo y registrar usuario para obtener el token\r",
											"const firstEmail = generateRandomEmail();\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: firstEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar primer usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const token = res.json().token;\r",
											"    if (!token) {\r",
											"        console.log(\"No se obtuvo el token del primer usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"    console.log(\"Token del primer usuario registrado:\", token);\r",
											"\r",
											"    // Registrar segundo usuario para obtener el ID\r",
											"    const secondEmail = generateRandomEmail();\r",
											"    pm.collectionVariables.set(\"randomEmail\", secondEmail); // Si lo necesitas luego\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${url}/api/auth/register`,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                name: \"Camila\",\r",
											"                lastname: \"Ramírez\",\r",
											"                email: secondEmail,\r",
											"                password: password\r",
											"            })\r",
											"        }\r",
											"    }, function (err2, res2) {\r",
											"        if (err2) {\r",
											"            console.log(\"Error al registrar segundo usuario:\", err2);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        const user = res2.json().user;\r",
											"        if (!user || !user.id) {\r",
											"            console.log(\"No se obtuvo el ID del segundo usuario.\");\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        console.log(\"ID del segundo usuario registrado:\", user.id);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE UNAUTHENTICATED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 100ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has message field\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('message');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generar un correo electrónico aleatorio\r",
											"function generateRandomEmail() {\r",
											"    const randomString = Math.random().toString(36).substring(2, 10);\r",
											"    return `user_${randomString}@example.com`;\r",
											"}\r",
											"\r",
											"const url = pm.collectionVariables.get(\"base_url\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"// Generar primer correo y registrar usuario para obtener el token\r",
											"const firstEmail = generateRandomEmail();\r",
											"pm.sendRequest({\r",
											"    url: `${url}/api/auth/register`,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Isabella\",\r",
											"            lastname: \"Ocampo\",\r",
											"            email: firstEmail,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error al registrar primer usuario:\", err);\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    const token = res.json().token;\r",
											"    if (!token) {\r",
											"        console.log(\"No se obtuvo el token del primer usuario.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set(\"token\", token);\r",
											"    console.log(\"Token del primer usuario registrado:\", token);\r",
											"\r",
											"    // Registrar segundo usuario para obtener el ID\r",
											"    const secondEmail = generateRandomEmail();\r",
											"    pm.collectionVariables.set(\"randomEmail\", secondEmail); // Si lo necesitas luego\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${url}/api/auth/register`,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                name: \"Camila\",\r",
											"                lastname: \"Ramírez\",\r",
											"                email: secondEmail,\r",
											"                password: password\r",
											"            })\r",
											"        }\r",
											"    }, function (err2, res2) {\r",
											"        if (err2) {\r",
											"            console.log(\"Error al registrar segundo usuario:\", err2);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        const user = res2.json().user;\r",
											"        if (!user || !user.id) {\r",
											"            console.log(\"No se obtuvo el ID del segundo usuario.\");\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        console.log(\"ID del segundo usuario registrado:\", user.id);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/users/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "UPDATE ROLES TO USER AS ADMIN",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un correo electrónico aleatorio\r",
									"function generateRandomEmail() {\r",
									"    const randomString = Math.random().toString(36).substring(2, 10);\r",
									"    return `user_${randomString}@example.com`;\r",
									"}\r",
									"const url = pm.collectionVariables.get(\"base_url\")\r",
									"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
									"const password = pm.collectionVariables.get(\"password\");\r",
									"\r",
									"// Guardar el email aleatorio en la variable de colección\r",
									"const randomEmail = generateRandomEmail();\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
									"\r",
									"// Login como admin y guardar el token\r",
									"pm.sendRequest({\r",
									"    url: `${url}/api/auth/login`,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            email: email, // <-- Reemplaza con un email de admin válido\r",
									"            password: password   // <-- Reemplaza con su contraseña\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Error en login admin:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    const token = res.json().token;\r",
									"\r",
									"    if (!token) {\r",
									"        console.log(\"No se obtuvo token del admin.\");\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"token\", token);\r",
									"    console.log(\"Token del admin guardado:\", token);\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: `${url}/api/auth/register`,\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\",\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify({\r",
									"                name: \"Isabella\",\r",
									"                lastname: \"Ocampo\",\r",
									"                password: password,\r",
									"                email: randomEmail\r",
									"            })\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"Error al crear usuario:\", err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        const user = res.json().user;\r",
									"        console.log(user)\r",
									"        if (user && user.id) {\r",
									"            pm.collectionVariables.set(\"userId\", user.id);\r",
									"            console.log(\"Usuario creado. ID guardado:\", user.id);\r",
									"        } else {\r",
									"            console.log(\"No se encontró el ID del usuario en la respuesta.\");\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the response status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Test 3: Verify the updated roles in the response\r",
									"pm.test(\"Verify the updated roles in the response\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.roles).to.eql([\"event-manager\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roles\": [\"event-manager\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/users/roles/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"roles",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE ROLES TO USER AS ADMIN INVALID ROLE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un correo electrónico aleatorio\r",
									"function generateRandomEmail() {\r",
									"    const randomString = Math.random().toString(36).substring(2, 10);\r",
									"    return `user_${randomString}@example.com`;\r",
									"}\r",
									"const url = pm.collectionVariables.get(\"base_url\")\r",
									"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
									"const password = pm.collectionVariables.get(\"password\");\r",
									"\r",
									"// Guardar el email aleatorio en la variable de colección\r",
									"const randomEmail = generateRandomEmail();\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
									"\r",
									"// Login como admin y guardar el token\r",
									"pm.sendRequest({\r",
									"    url: `${url}/api/auth/login`,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            email: email, // <-- Reemplaza con un email de admin válido\r",
									"            password: password   // <-- Reemplaza con su contraseña\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Error en login admin:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    const token = res.json().token;\r",
									"\r",
									"    if (!token) {\r",
									"        console.log(\"No se obtuvo token del admin.\");\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"token\", token);\r",
									"    console.log(\"Token del admin guardado:\", token);\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: `${url}/api/auth/register`,\r",
									"        method: \"POST\",\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\",\r",
									"        },\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify({\r",
									"                name: \"Isabella\",\r",
									"                lastname: \"Ocampo\",\r",
									"                password: password,\r",
									"                email: randomEmail\r",
									"            })\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"Error al crear usuario:\", err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        const user = res.json().user;\r",
									"        console.log(user)\r",
									"        if (user && user.id) {\r",
									"            pm.collectionVariables.set(\"userId\", user.id);\r",
									"            console.log(\"Usuario creado. ID guardado:\", user.id);\r",
									"        } else {\r",
									"            console.log(\"No se encontró el ID del usuario en la respuesta.\");\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Check the response status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test 2: Verify the response body structure and content\r",
									"pm.test(\"Response contains error message and statusCode\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.message).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(responseBody.error).to.equal(\"Bad Request\");\r",
									"    pm.expect(responseBody.statusCode).to.equal(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roles\": [\"event-managers\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/users/roles/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"roles",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE ROLES TO USER NOT ADMIN",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un correo electrónico aleatorio\r",
									"function generateRandomEmail() {\r",
									"    const randomString = Math.random().toString(36).substring(2, 10);\r",
									"    return `user_${randomString}@example.com`;\r",
									"}\r",
									"\r",
									"const url = pm.collectionVariables.get(\"base_url\");\r",
									"const password = pm.collectionVariables.get(\"password\");\r",
									"const randomEmail = generateRandomEmail();\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
									"\r",
									"// Registrar un nuevo usuario\r",
									"pm.sendRequest({\r",
									"    url: `${url}/api/auth/register`,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            name: \"Isabella\",\r",
									"            lastname: \"Ocampo\",\r",
									"            email: randomEmail,\r",
									"            password: password\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Error al registrar usuario:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    const user = res.json().user;\r",
									"    const token = res.json().token;\r",
									"    if (!user || !user.id || !token) {\r",
									"        console.log(\"No se obtuvo el ID o el token del usuario.\");\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"userId\", user.id);\r",
									"    pm.collectionVariables.set(\"token\", token);\r",
									"\r",
									"    console.log(\"Usuario registrado. ID:\", user.id);\r",
									"    console.log(\"Usuario registrado. Token:\", token);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the status code is 403\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"// Test 2: Verify the response message for the forbidden error\r",
									"pm.test(\"Verify the response message for the forbidden error\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.error).to.eql(\"Forbidden\");\r",
									"    pm.expect(responseBody.statusCode).to.eql(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roles\": [\"event-managers\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/users/roles/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"roles",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE ROLES TO USER UNAUTHENTICATED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un correo electrónico aleatorio\r",
									"function generateRandomEmail() {\r",
									"    const randomString = Math.random().toString(36).substring(2, 10);\r",
									"    return `user_${randomString}@example.com`;\r",
									"}\r",
									"\r",
									"const url = pm.collectionVariables.get(\"base_url\");\r",
									"const password = pm.collectionVariables.get(\"password\");\r",
									"const randomEmail = generateRandomEmail();\r",
									"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
									"\r",
									"// Registrar un nuevo usuario\r",
									"pm.sendRequest({\r",
									"    url: `${url}/api/auth/register`,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\r",
									"            name: \"Isabella\",\r",
									"            lastname: \"Ocampo\",\r",
									"            email: randomEmail,\r",
									"            password: password\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"Error al registrar usuario:\", err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    const user = res.json().user;\r",
									"    const token = res.json().token;\r",
									"    if (!user || !user.id || !token) {\r",
									"        console.log(\"No se obtuvo el ID o el token del usuario.\");\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    pm.collectionVariables.set(\"userId\", user.id);\r",
									"    pm.collectionVariables.set(\"token\", token);\r",
									"\r",
									"    console.log(\"Usuario registrado. ID:\", user.id);\r",
									"    console.log(\"Usuario registrado. Token:\", token);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for the PUT request to update user roles\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has message and statusCode\", function () {\r",
									"    pm.response.to.have.jsonBody('message');\r",
									"    pm.response.to.have.jsonBody('statusCode');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roles\": [\"event-managers\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/users/roles/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"roles",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "CREATE EVENT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"eventmanageEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        \r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        } else {\r",
											"            console.log(\"No se encontró un token en la respuesta.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Event has correct properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData).to.have.property(\"bannerPhotoUrl\");\r",
											"    pm.expect(jsonData).to.have.property(\"isPublic\");\r",
											"\r",
											"    console.log(\"✅ Propiedades verificadas:\", {\r",
											"        name: jsonData.name,\r",
											"        bannerPhotoUrl: jsonData.bannerPhotoUrl,\r",
											"        isPublic: jsonData.isPublic\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Concierto de Rock\",\r\n    \"bannerPhotoUrl\": \"https://example.com/banner.jpg\",\r\n    \"isPublic\": true,\r\n    \"userId\": \"{{userId}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/event/create",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"event",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE EVENT WITH UNAUTHORIZED USER",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"userEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        \r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        } else {\r",
											"            console.log(\"No se encontró un token en la respuesta.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Debe retornar 403 Forbidden con formato de mensaje válido\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"    // Verifica que el mensaje tenga el formato: \"User <algo> needs a valid role\"\r",
											"    pm.expect(jsonData.message).to.match(/^User .* needs a valid role$/);\r",
											"\r",
											"    console.log(\"✅ Mensaje con formato válido:\", jsonData.message);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Tech Conference\",\r\n    \"bannerPhotoUrl\": \"https://example.com/banner.jpg\",\r\n    \"isPublic\": true,\r\n    \"userId\": \"user123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/event/create",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"event",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "FIND ALL EVENTS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        \r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        } else {\r",
											"            console.log(\"No se encontró un token en la respuesta.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each event has expected properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.forEach(event => {\r",
											"        pm.expect(event).to.have.property(\"id\");\r",
											"        pm.expect(event).to.have.property(\"name\");\r",
											"        pm.expect(event).to.have.property(\"bannerPhotoUrl\");\r",
											"        pm.expect(event).to.have.property(\"isPublic\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/event/findAll",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"event",
										"findAll"
									]
								}
							},
							"response": []
						},
						{
							"name": "FIND EVENT BY ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Autenticación\r",
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/auth/login`;\r",
											"\r",
											"// Solo realizar la autenticación si no hay token o si ha expirado\r",
											"if (!pm.collectionVariables.get(\"token\")) {\r",
											"    pm.sendRequest({\r",
											"        url: authUrl,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                email: email,\r",
											"                password: password\r",
											"            })\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"Error en la solicitud:\", err);\r",
											"        } else {\r",
											"            const token = res.json().token;\r",
											"            \r",
											"            if (token) {\r",
											"                pm.collectionVariables.set(\"token\", token);\r",
											"                console.log(\"Token guardado:\", token);\r",
											"            } else {\r",
											"                console.log(\"No se encontró un token en la respuesta.\");\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"// Guardar el ID del evento que estás buscando para uso en tests\r",
											"pm.collectionVariables.set(\"eventId\", \"3721cb8c-58f6-4e73-a152-b112c8b6f15c\");\r",
											"\r",
											"console.log(\"Buscando evento con ID:\", pm.collectionVariables.get(\"eventId\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains the expected event properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData).to.have.property(\"bannerPhotoUrl\");\r",
											"    pm.expect(jsonData).to.have.property(\"isPublic\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/event/find/{{eventId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"event",
										"find",
										"{{eventId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "UPDATE EXISTING EVENT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"\r",
											"if (!pm.collectionVariables.get(\"token\")) {\r",
											"    pm.sendRequest({\r",
											"        url: authUrl,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                email: email,\r",
											"                password: password\r",
											"            })\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"Error en la solicitud:\", err);\r",
											"        } else {\r",
											"            const token = res.json().token;\r",
											"            if (token) {\r",
											"                pm.collectionVariables.set(\"token\", token);\r",
											"                console.log(\"Token guardado:\", token);\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"}\r",
											"pm.collectionVariables.set(\"eventId\",\"3f9df69f-1294-402a-a1db-89941cea0df2\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains updated event properties\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData.name).to.equal(\"Concierto de Jazz\");\r",
											"    pm.expect(jsonData.bannerPhotoUrl).to.equal(\"https://example.com/new-banner.jpg\");\r",
											"    pm.expect(jsonData.isPublic).to.be.false;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Concierto de Jazz\",\r\n    \"bannerPhotoUrl\": \"https://example.com/new-banner.jpg\",\r\n    \"isPublic\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/event/update/{{eventId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"event",
										"update",
										"{{eventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE EXISTING EVENT WITH UNAUTHORIZED USER",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"d\")\r",
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"userEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: authUrl,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                email: email,\r",
											"                password: password\r",
											"            })\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"Error en la solicitud:\", err);\r",
											"        } else {\r",
											"            const token = res.json().token;\r",
											"            if (token) {\r",
											"                pm.collectionVariables.set(\"token\", token);\r",
											"                console.log(\"Token guardado:\", token);\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"\r",
											"pm.collectionVariables.set(\"eventId\",\"b663bf37-2a4f-4490-85ef-48e7b892cd34\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Debe retornar 403 Forbidden con formato de mensaje válido\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    // Validar que el mensaje siga el patrón esperado\r",
											"    pm.expect(jsonData.message).to.match(/^User .* needs a valid role$/);\r",
											"\r",
											"    console.log(\"✅ Mensaje con formato válido:\", jsonData.message);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated Event Name\",\r\n    \"bannerPhotoUrl\": \"https://example.com/updated-banner.jpg\",\r\n    \"isPublic\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/event/update/{{eventId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"event",
										"update",
										"{{eventId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DELETE EXISTING EVENT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"const eventUrl = `${baseUrl}/api/event/create`;\r",
											"\r",
											"// Hacer la solicitud de autenticación\r",
											"\r",
											"pm.collectionVariables.set(\"eventId\",\"3d9ac5c6-6b6e-4fcb-a36f-e5a45fe22225\");\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        }\r",
											"\r",
											"        // Hacer la solicitud para crear el evento\r",
											"        pm.sendRequest({\r",
											"            url: eventUrl,\r",
											"            method: \"POST\",\r",
											"            header: {\r",
											"                \"Content-Type\": \"application/json\",\r",
											"                \"Authorization\": `Bearer ${token}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: \"raw\",\r",
											"                raw: JSON.stringify({\r",
											"                    name: \"Concierto de Rock\",\r",
											"                    bannerPhotoUrl: \"https://example.com/banner.jpg\",\r",
											"                    isPublic: true,\r",
											"                    userId: \"b663bf37-2a4f-4490-85ef-48e7b892cd34\"\r",
											"                })\r",
											"            }\r",
											"        }, function (eventErr, eventRes) {\r",
											"            if (eventErr) {\r",
											"                console.log(\"Error al crear el evento:\", eventErr);\r",
											"            } else {\r",
											"                const eventId = eventRes.json()._id;\r",
											"                if (eventId) {\r",
											"                    pm.collectionVariables.set(\"eventId\", eventId);\r",
											"                    console.log(\"Evento creado con ID:\", eventId);\r",
											"                }\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is empty or contains success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/event/delete/{{eventId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"event",
										"delete",
										"{{eventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE EXISTING EVENT WITH UNAUTHORIZED USER",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"userEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/api/auth/login`;\r",
											"const eventUrl = `${baseUrl}/api/event/create`;\r",
											"\r",
											"// Hacer la solicitud de autenticación\r",
											"\r",
											"pm.collectionVariables.set(\"eventId\",\"bd284937-dddc-4c64-b6ab-91d43ce176d9\");\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        }\r",
											"\r",
											"        // Hacer la solicitud para crear el evento\r",
											"        pm.sendRequest({\r",
											"            url: eventUrl,\r",
											"            method: \"POST\",\r",
											"            header: {\r",
											"                \"Content-Type\": \"application/json\",\r",
											"                \"Authorization\": `Bearer ${token}`\r",
											"            },\r",
											"            body: {\r",
											"                mode: \"raw\",\r",
											"                raw: JSON.stringify({\r",
											"                    name: \"Concierto de Rock\",\r",
											"                    bannerPhotoUrl: \"https://example.com/banner.jpg\",\r",
											"                    isPublic: true,\r",
											"                    userId: \"b663bf37-2a4f-4490-85ef-48e7b892cd34\"\r",
											"                })\r",
											"            }\r",
											"        }, function (eventErr, eventRes) {\r",
											"            if (eventErr) {\r",
											"                console.log(\"Error al crear el evento:\", eventErr);\r",
											"            } else {\r",
											"                const eventId = eventRes.json()._id;\r",
											"                if (eventId) {\r",
											"                    pm.collectionVariables.set(\"eventId\", eventId);\r",
											"                    console.log(\"Evento creado con ID:\", eventId);\r",
											"                }\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Debe retornar 403 Forbidden con mensaje de rol inválido\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.match(/^User .* needs a valid role$/);\r",
											"\r",
											"    console.log(\"✅ Formato de mensaje validado:\", jsonData.message);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/event/delete/{{eventId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"event",
										"delete",
										"{{eventId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tickets",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "CREATE TICKET WITHOUT TOKEN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Asegurarse de que el token NO está en los headers\r",
											"pm.request.headers.clear();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Debe devolver 401 si no hay token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Presentation_idPresentation\": 123,\r\n  \"User_idUser\": \"4556\",\r\n  \"isRedeemed\": false,\r\n  \"isActive\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ticket/buy",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ticket",
										"buy"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE TICKET",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/auth/login`;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        \r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        } else {\r",
											"            console.log(\"No se encontró un token en la respuesta.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has buyDate\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('buyDate');\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has Presentation_idPresentation\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('Presentation_idPresentation');\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has User_idUser\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('User_idUser');\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has isRedeemed\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('isRedeemed');\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has isActive\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('isActive');\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has _id\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('_id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has __v\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('__v');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Presentation_idPresentation\": 1234,\r\n  \"User_idUser\": \"456\",\r\n  \"isRedeemed\": false,\r\n  \"isActive\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ticket/buy",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ticket",
										"buy"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "GET DETAILS WITHOUT AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has required properties\", function () {\r",
											"    pm.response.json().forEach(ticket => {\r",
											"        pm.expect(ticket).to.have.property(\"_id\");\r",
											"        pm.expect(ticket).to.have.property(\"buyDate\");\r",
											"        pm.expect(ticket).to.have.property(\"Presentation_idPresentation\");\r",
											"        pm.expect(ticket).to.have.property(\"User_idUser\");\r",
											"        pm.expect(ticket).to.have.property(\"isRedeemed\");\r",
											"        pm.expect(ticket).to.have.property(\"isActive\");\r",
											"        pm.expect(ticket).to.have.property(\"__v\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/ticket/user/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ticket",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "FIND ALL TICKETS USER",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Autenticación\r",
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/auth/login`;\r",
											"\r",
											"// Solo realizar la autenticación si no hay token o si ha expirado\r",
											"if (!pm.collectionVariables.get(\"token\")) {\r",
											"    pm.sendRequest({\r",
											"        url: authUrl,\r",
											"        method: \"POST\",\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify({\r",
											"                email: email,\r",
											"                password: password\r",
											"            })\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"Error en la solicitud:\", err);\r",
											"        } else {\r",
											"            const token = res.json().token;\r",
											"            \r",
											"            if (token) {\r",
											"                pm.collectionVariables.set(\"token\", token);\r",
											"                console.log(\"Token guardado:\", token);\r",
											"            } else {\r",
											"                console.log(\"No se encontró un token en la respuesta.\");\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"// Guardar el ID del evento que estás buscando para uso en tests\r",
											"pm.collectionVariables.set(\"eventId\", pm.collectionVariables.get(\"eventId\") || \"67e9a5ca924d886968e4707a\");\r",
											"\r",
											"console.log(\"Buscando evento con ID:\", pm.collectionVariables.get(\"eventId\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has _id, buyDate, Presentation_idPresentation, User_idUser, isRedeemed, isActive, and __v properties\", function () {\r",
											"    pm.expect(pm.response.json()[0]).to.have.property('_id');\r",
											"    pm.expect(pm.response.json()[0]).to.have.property('buyDate');\r",
											"    pm.expect(pm.response.json()[0]).to.have.property('Presentation_idPresentation');\r",
											"    pm.expect(pm.response.json()[0]).to.have.property('User_idUser');\r",
											"    pm.expect(pm.response.json()[0]).to.have.property('isRedeemed');\r",
											"    pm.expect(pm.response.json()[0]).to.have.property('isActive');\r",
											"    pm.expect(pm.response.json()[0]).to.have.property('__v');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ticket/user/{{userId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ticket",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DETAILS TICKET",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseUrl = pm.collectionVariables.get(\"base_url\");\r",
											"const email = pm.collectionVariables.get(\"superadminEmail\");\r",
											"const password = pm.collectionVariables.get(\"password\");\r",
											"\r",
											"const authUrl = `${baseUrl}/auth/login`;\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: authUrl,\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            email: email,\r",
											"            password: password\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        const token = res.json().token;\r",
											"        \r",
											"        if (token) {\r",
											"            pm.collectionVariables.set(\"token\", token);\r",
											"            console.log(\"Token guardado:\", token);\r",
											"        } else {\r",
											"            console.log(\"No se encontró un token en la respuesta.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has required properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property(\"_id\");\r",
											"    pm.expect(pm.response.json()).to.have.property(\"buyDate\");\r",
											"    pm.expect(pm.response.json()).to.have.property(\"Presentation_idPresentation\");\r",
											"    pm.expect(pm.response.json()).to.have.property(\"User_idUser\");\r",
											"    pm.expect(pm.response.json()).to.have.property(\"isRedeemed\");\r",
											"    pm.expect(pm.response.json()).to.have.property(\"isActive\");\r",
											"    pm.expect(pm.response.json()).to.have.property(\"__v\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ticket/{{ticketId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ticket",
										"{{ticketId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "CANCEL TICKET WITHOUT AUTH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"base_url\") + \"/ticket/buy\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            \"Presentation_idPresentation\": 123,\r",
											"            \"User_idUser\": \"456\",\r",
											"            \"isRedeemed\": false,\r",
											"            \"isActive\": true\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        let responseData = res.json();\r",
											"        if (res.code === 201 && responseData._id) {\r",
											"            pm.collectionVariables.set(\"cancelTicket\", responseData._id);\r",
											"            console.log(\"Ticket creado con éxito:\", responseData._id);\r",
											"        } else {\r",
											"            console.log(\"Error al crear ticket:\", responseData);\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has message property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/ticket/{{cancelTicket}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ticket",
										"{{cancelTicket}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CANCEL TICKET WITH AUTH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get(\"base_url\") + \"/ticket/buy\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            \"Presentation_idPresentation\": 123,\r",
											"            \"User_idUser\": \"456\",\r",
											"            \"isRedeemed\": false,\r",
											"            \"isActive\": true\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud:\", err);\r",
											"    } else {\r",
											"        let responseData = res.json();\r",
											"        if (res.code === 201 && responseData._id) {\r",
											"            pm.collectionVariables.set(\"cancelTicket\", responseData._id);\r",
											"            console.log(\"Ticket creado con éxito:\", responseData._id);\r",
											"        } else {\r",
											"            console.log(\"Error al crear ticket:\", responseData);\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for the status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for the response body properties\r",
											"pm.test(\"Response contains message and ticket properties\", function () {\r",
											"    pm.response.to.have.jsonBody('message');\r",
											"    pm.response.to.have.jsonBody('ticket');\r",
											"});\r",
											"\r",
											"// Test for specific properties of the ticket object\r",
											"pm.test(\"Ticket object has specific properties\", function () {\r",
											"    pm.response.to.have.jsonBody('ticket._id');\r",
											"    pm.response.to.have.jsonBody('ticket.buyDate');\r",
											"    pm.response.to.have.jsonBody('ticket.Presentation_idPresentation');\r",
											"    pm.response.to.have.jsonBody('ticket.User_idUser');\r",
											"    pm.response.to.have.jsonBody('ticket.isRedeemed');\r",
											"    pm.response.to.have.jsonBody('ticket.isActive');\r",
											"    pm.response.to.have.jsonBody('ticket.__v');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/ticket/{{cancelTicket}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ticket",
										"{{cancelTicket}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Report",
			"item": [
				{
					"name": "GENERATE SALES REPORT",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/report/sales",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"report",
								"sales"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"pm.collectionVariables.set(\"randomEmail\", \"variable_value\");\r",
					"\r",
					"const users = [\r",
					"    {\r",
					"        role: 'eventManager',\r",
					"        email: 'isabella.ocampo@u.icesi.edu.co',\r",
					"        password: '{{password}}'\r",
					"    },\r",
					"    {\r",
					"        role: 'user',\r",
					"        email: 'user@example.com',\r",
					"        password: '{{password}}'\r",
					"    },\r",
					"    {\r",
					"        role: 'admin',\r",
					"        email: 'alejitocordoba@hotmail.com',\r",
					"        password: '{{password}}'\r",
					"    }\r",
					"];\r",
					"\r",
					"const tokenRequests = users.map(user => {\r",
					"    return pm.sendRequest({\r",
					"        url: pm.environment.get('baseUrl') + '/auth/login',\r",
					"        method: 'POST',\r",
					"        header: { 'Content-Type': 'application/json' },\r",
					"        body: {\r",
					"            mode: 'raw',\r",
					"            raw: JSON.stringify({\r",
					"                email: user.email,\r",
					"                password: user.password\r",
					"            })\r",
					"        }\r",
					"    }, function (err, res) {\r",
					"        if (err) {\r",
					"            console.error(`❌ Error logging in as ${user.role}:`, err);\r",
					"            return;\r",
					"        }\r",
					"\r",
					"        if (res.code === 200) {\r",
					"            const token = res.json().accessToken;\r",
					"            pm.environment.set(`${user.role}Token`, token);\r",
					"            console.log(`✅ Token saved for ${user.role}`);\r",
					"        } else {\r",
					"            console.warn(`⚠️ Login failed for ${user.role}: ${res.code}`);\r",
					"        }\r",
					"    });\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "superadminEmail",
			"value": "alejitocordoba@hotmail.com",
			"type": "string"
		},
		{
			"key": "eventmanageEmail",
			"value": "isabella.ocampo@u.icesi.edu.co",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "valentina.gonzalez3@u.icesi.edu.co",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Hola1597!!!",
			"type": "string"
		},
		{
			"key": "randomEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "3721cb8c-58f6-4e73-a152-b112c8b6f15c"
		},
		{
			"key": "randomEventName",
			"value": ""
		},
		{
			"key": "cancelTicket",
			"value": "67ec1d4709b1ab2f504cfed6"
		},
		{
			"key": "userId",
			"value": "456",
			"type": "string"
		},
		{
			"key": "ticketId",
			"value": "67e9da50ac19f247480c42e4",
			"type": "string"
		},
		{
			"key": "eventToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQ3MjI5YzdiLWVmYTUtNGU4NS1hYWZkLTE5MDZhMGMzNjFjZSIsImlhdCI6MTc0NzA3OTEyOSwiZXhwIjoxNzQ3MDgyNzI5fQ.HV3QLY7q6aTchiJcAyMkfozOWnAr-F7R4d1DE0L5BUs",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjZhNWU0ODA1LWIwYWEtNGUyYS05NzJhLTJlYzMwZGQ0NjNkNCIsImlhdCI6MTc0NzA3OTAzOSwiZXhwIjoxNzQ3MDgyNjM5fQ.nYdHYm_vk0ItJjkDUQW_vkGxSEy0WoyU34J9ZtRN8dg",
			"type": "string"
		}
	]
}